// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: clientToTask.proto

package clientToTask

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ImageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width   int32  `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height  int32  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	MatType int32  `protobuf:"varint,3,opt,name=matType,proto3" json:"matType,omitempty"`
	Image   []byte `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	ImageID int32  `protobuf:"varint,5,opt,name=imageID,proto3" json:"imageID,omitempty"`
}

func (x *ImageData) Reset() {
	*x = ImageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientToTask_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageData) ProtoMessage() {}

func (x *ImageData) ProtoReflect() protoreflect.Message {
	mi := &file_clientToTask_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageData.ProtoReflect.Descriptor instead.
func (*ImageData) Descriptor() ([]byte, []int) {
	return file_clientToTask_proto_rawDescGZIP(), []int{0}
}

func (x *ImageData) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ImageData) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ImageData) GetMatType() int32 {
	if x != nil {
		return x.MatType
	}
	return 0
}

func (x *ImageData) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *ImageData) GetImageID() int32 {
	if x != nil {
		return x.ImageID
	}
	return 0
}

var File_clientToTask_proto protoreflect.FileDescriptor

var file_clientToTask_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x61,
	0x73, 0x6b, 0x22, 0x83, 0x01, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44, 0x32, 0xa2, 0x01, 0x0a, 0x10, 0x72, 0x70, 0x63,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x61, 0x72, 0x67, 0x6f, 0x12, 0x47, 0x0a,
	0x0d, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x76, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x17,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x45, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x61, 0x73,
	0x6b, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x42, 0x3c, 0x5a,
	0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x69, 0x6b, 0x68,
	0x73, 0x32, 0x34, 0x37, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_clientToTask_proto_rawDescOnce sync.Once
	file_clientToTask_proto_rawDescData = file_clientToTask_proto_rawDesc
)

func file_clientToTask_proto_rawDescGZIP() []byte {
	file_clientToTask_proto_rawDescOnce.Do(func() {
		file_clientToTask_proto_rawDescData = protoimpl.X.CompressGZIP(file_clientToTask_proto_rawDescData)
	})
	return file_clientToTask_proto_rawDescData
}

var file_clientToTask_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_clientToTask_proto_goTypes = []interface{}{
	(*ImageData)(nil), // 0: clientToTask.ImageData
}
var file_clientToTask_proto_depIdxs = []int32{
	0, // 0: clientToTask.rpcClientToCargo.SendRecvImage:input_type -> clientToTask.ImageData
	0, // 1: clientToTask.rpcClientToCargo.TestPerformance:input_type -> clientToTask.ImageData
	0, // 2: clientToTask.rpcClientToCargo.SendRecvImage:output_type -> clientToTask.ImageData
	0, // 3: clientToTask.rpcClientToCargo.TestPerformance:output_type -> clientToTask.ImageData
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_clientToTask_proto_init() }
func file_clientToTask_proto_init() {
	if File_clientToTask_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_clientToTask_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_clientToTask_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_clientToTask_proto_goTypes,
		DependencyIndexes: file_clientToTask_proto_depIdxs,
		MessageInfos:      file_clientToTask_proto_msgTypes,
	}.Build()
	File_clientToTask_proto = out.File
	file_clientToTask_proto_rawDesc = nil
	file_clientToTask_proto_goTypes = nil
	file_clientToTask_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RpcClientToCargoClient is the client API for RpcClientToCargo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcClientToCargoClient interface {
	SendRecvImage(ctx context.Context, opts ...grpc.CallOption) (RpcClientToCargo_SendRecvImageClient, error)
	TestPerformance(ctx context.Context, in *ImageData, opts ...grpc.CallOption) (*ImageData, error)
}

type rpcClientToCargoClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcClientToCargoClient(cc grpc.ClientConnInterface) RpcClientToCargoClient {
	return &rpcClientToCargoClient{cc}
}

func (c *rpcClientToCargoClient) SendRecvImage(ctx context.Context, opts ...grpc.CallOption) (RpcClientToCargo_SendRecvImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RpcClientToCargo_serviceDesc.Streams[0], "/clientToTask.rpcClientToCargo/SendRecvImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpcClientToCargoSendRecvImageClient{stream}
	return x, nil
}

type RpcClientToCargo_SendRecvImageClient interface {
	Send(*ImageData) error
	Recv() (*ImageData, error)
	grpc.ClientStream
}

type rpcClientToCargoSendRecvImageClient struct {
	grpc.ClientStream
}

func (x *rpcClientToCargoSendRecvImageClient) Send(m *ImageData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rpcClientToCargoSendRecvImageClient) Recv() (*ImageData, error) {
	m := new(ImageData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rpcClientToCargoClient) TestPerformance(ctx context.Context, in *ImageData, opts ...grpc.CallOption) (*ImageData, error) {
	out := new(ImageData)
	err := c.cc.Invoke(ctx, "/clientToTask.rpcClientToCargo/TestPerformance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcClientToCargoServer is the server API for RpcClientToCargo service.
type RpcClientToCargoServer interface {
	SendRecvImage(RpcClientToCargo_SendRecvImageServer) error
	TestPerformance(context.Context, *ImageData) (*ImageData, error)
}

// UnimplementedRpcClientToCargoServer can be embedded to have forward compatible implementations.
type UnimplementedRpcClientToCargoServer struct {
}

func (*UnimplementedRpcClientToCargoServer) SendRecvImage(RpcClientToCargo_SendRecvImageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendRecvImage not implemented")
}
func (*UnimplementedRpcClientToCargoServer) TestPerformance(context.Context, *ImageData) (*ImageData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestPerformance not implemented")
}

func RegisterRpcClientToCargoServer(s *grpc.Server, srv RpcClientToCargoServer) {
	s.RegisterService(&_RpcClientToCargo_serviceDesc, srv)
}

func _RpcClientToCargo_SendRecvImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcClientToCargoServer).SendRecvImage(&rpcClientToCargoSendRecvImageServer{stream})
}

type RpcClientToCargo_SendRecvImageServer interface {
	Send(*ImageData) error
	Recv() (*ImageData, error)
	grpc.ServerStream
}

type rpcClientToCargoSendRecvImageServer struct {
	grpc.ServerStream
}

func (x *rpcClientToCargoSendRecvImageServer) Send(m *ImageData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rpcClientToCargoSendRecvImageServer) Recv() (*ImageData, error) {
	m := new(ImageData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RpcClientToCargo_TestPerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcClientToCargoServer).TestPerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientToTask.rpcClientToCargo/TestPerformance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcClientToCargoServer).TestPerformance(ctx, req.(*ImageData))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcClientToCargo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clientToTask.rpcClientToCargo",
	HandlerType: (*RpcClientToCargoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestPerformance",
			Handler:    _RpcClientToCargo_TestPerformance_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendRecvImage",
			Handler:       _RpcClientToCargo_SendRecvImage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "clientToTask.proto",
}
