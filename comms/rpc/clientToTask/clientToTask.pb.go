// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.14.0
// source: clientToTask.proto

package clientToTask

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestPerf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientID string `protobuf:"bytes,2,opt,name=clientID,proto3" json:"clientID,omitempty"`
}

func (x *TestPerf) Reset() {
	*x = TestPerf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientToTask_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPerf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPerf) ProtoMessage() {}

func (x *TestPerf) ProtoReflect() protoreflect.Message {
	mi := &file_clientToTask_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPerf.ProtoReflect.Descriptor instead.
func (*TestPerf) Descriptor() ([]byte, []int) {
	return file_clientToTask_proto_rawDescGZIP(), []int{0}
}

func (x *TestPerf) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

type PerfData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcTime *durationpb.Duration `protobuf:"bytes,1,opt,name=procTime,proto3" json:"procTime,omitempty"`
}

func (x *PerfData) Reset() {
	*x = PerfData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientToTask_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerfData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerfData) ProtoMessage() {}

func (x *PerfData) ProtoReflect() protoreflect.Message {
	mi := &file_clientToTask_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerfData.ProtoReflect.Descriptor instead.
func (*PerfData) Descriptor() ([]byte, []int) {
	return file_clientToTask_proto_rawDescGZIP(), []int{1}
}

func (x *PerfData) GetProcTime() *durationpb.Duration {
	if x != nil {
		return x.ProcTime
	}
	return nil
}

type ProbeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateNumber int64                `protobuf:"varint,1,opt,name=stateNumber,proto3" json:"stateNumber,omitempty"`
	WhatIfTime  *durationpb.Duration `protobuf:"bytes,2,opt,name=whatIfTime,proto3" json:"whatIfTime,omitempty"`
}

func (x *ProbeResult) Reset() {
	*x = ProbeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientToTask_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeResult) ProtoMessage() {}

func (x *ProbeResult) ProtoReflect() protoreflect.Message {
	mi := &file_clientToTask_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeResult.ProtoReflect.Descriptor instead.
func (*ProbeResult) Descriptor() ([]byte, []int) {
	return file_clientToTask_proto_rawDescGZIP(), []int{2}
}

func (x *ProbeResult) GetStateNumber() int64 {
	if x != nil {
		return x.StateNumber
	}
	return 0
}

func (x *ProbeResult) GetWhatIfTime() *durationpb.Duration {
	if x != nil {
		return x.WhatIfTime
	}
	return nil
}

type Decision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastSate int64 `protobuf:"varint,1,opt,name=lastSate,proto3" json:"lastSate,omitempty"`
}

func (x *Decision) Reset() {
	*x = Decision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientToTask_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decision) ProtoMessage() {}

func (x *Decision) ProtoReflect() protoreflect.Message {
	mi := &file_clientToTask_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decision.ProtoReflect.Descriptor instead.
func (*Decision) Descriptor() ([]byte, []int) {
	return file_clientToTask_proto_rawDescGZIP(), []int{3}
}

func (x *Decision) GetLastSate() int64 {
	if x != nil {
		return x.LastSate
	}
	return 0
}

type JoinResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *JoinResult) Reset() {
	*x = JoinResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientToTask_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinResult) ProtoMessage() {}

func (x *JoinResult) ProtoReflect() protoreflect.Message {
	mi := &file_clientToTask_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinResult.ProtoReflect.Descriptor instead.
func (*JoinResult) Descriptor() ([]byte, []int) {
	return file_clientToTask_proto_rawDescGZIP(), []int{4}
}

func (x *JoinResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type EmptyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyMessage) Reset() {
	*x = EmptyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientToTask_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyMessage) ProtoMessage() {}

func (x *EmptyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_clientToTask_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyMessage.ProtoReflect.Descriptor instead.
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return file_clientToTask_proto_rawDescGZIP(), []int{5}
}

type ImageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width    int32  `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height   int32  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	MatType  int32  `protobuf:"varint,3,opt,name=matType,proto3" json:"matType,omitempty"`
	Image    []byte `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	Start    int32  `protobuf:"varint,5,opt,name=start,proto3" json:"start,omitempty"`
	ClientID string `protobuf:"bytes,6,opt,name=clientID,proto3" json:"clientID,omitempty"`
}

func (x *ImageData) Reset() {
	*x = ImageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientToTask_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageData) ProtoMessage() {}

func (x *ImageData) ProtoReflect() protoreflect.Message {
	mi := &file_clientToTask_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageData.ProtoReflect.Descriptor instead.
func (*ImageData) Descriptor() ([]byte, []int) {
	return file_clientToTask_proto_rawDescGZIP(), []int{6}
}

func (x *ImageData) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ImageData) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ImageData) GetMatType() int32 {
	if x != nil {
		return x.MatType
	}
	return 0
}

func (x *ImageData) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *ImageData) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ImageData) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

type ProcessResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseCode int32  `protobuf:"varint,1,opt,name=responseCode,proto3" json:"responseCode,omitempty"`
	Result       string `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ProcessResult) Reset() {
	*x = ProcessResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clientToTask_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessResult) ProtoMessage() {}

func (x *ProcessResult) ProtoReflect() protoreflect.Message {
	mi := &file_clientToTask_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessResult.ProtoReflect.Descriptor instead.
func (*ProcessResult) Descriptor() ([]byte, []int) {
	return file_clientToTask_proto_rawDescGZIP(), []int{7}
}

func (x *ProcessResult) GetResponseCode() int32 {
	if x != nil {
		return x.ResponseCode
	}
	return 0
}

func (x *ProcessResult) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

var File_clientToTask_proto protoreflect.FileDescriptor

var file_clientToTask_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x61,
	0x73, 0x6b, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x26, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x50, 0x65, 0x72, 0x66, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x41, 0x0a, 0x08, 0x50, 0x65,
	0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6a, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39,
	0x0a, 0x0a, 0x77, 0x68, 0x61, 0x74, 0x49, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x77,
	0x68, 0x61, 0x74, 0x49, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x26, 0x0a, 0x08, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x74,
	0x65, 0x22, 0x26, 0x0a, 0x0a, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x09, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x4b, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x32, 0x8b, 0x04, 0x0a, 0x0f, 0x72, 0x70, 0x63, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3f, 0x0a, 0x0b, 0x52, 0x54, 0x54, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x65, 0x72, 0x66, 0x1a,
	0x16, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x50,
	0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x65,
	0x72, 0x66, 0x1a, 0x19, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x61, 0x73,
	0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x42, 0x0a, 0x0c, 0x4a, 0x6f, 0x69, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x16, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x1a, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0b, 0x45, 0x6e, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x61, 0x73,
	0x6b, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00,
	0x12, 0x43, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x61,
	0x73, 0x6b, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x65, 0x72, 0x66, 0x1a, 0x16, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63,
	0x76, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x1b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6e, 0x69, 0x6b, 0x68, 0x73, 0x32, 0x34, 0x37, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x73, 0x2f,
	0x72, 0x70, 0x63, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x6b,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_clientToTask_proto_rawDescOnce sync.Once
	file_clientToTask_proto_rawDescData = file_clientToTask_proto_rawDesc
)

func file_clientToTask_proto_rawDescGZIP() []byte {
	file_clientToTask_proto_rawDescOnce.Do(func() {
		file_clientToTask_proto_rawDescData = protoimpl.X.CompressGZIP(file_clientToTask_proto_rawDescData)
	})
	return file_clientToTask_proto_rawDescData
}

var file_clientToTask_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_clientToTask_proto_goTypes = []interface{}{
	(*TestPerf)(nil),            // 0: clientToTask.TestPerf
	(*PerfData)(nil),            // 1: clientToTask.PerfData
	(*ProbeResult)(nil),         // 2: clientToTask.ProbeResult
	(*Decision)(nil),            // 3: clientToTask.Decision
	(*JoinResult)(nil),          // 4: clientToTask.JoinResult
	(*EmptyMessage)(nil),        // 5: clientToTask.EmptyMessage
	(*ImageData)(nil),           // 6: clientToTask.ImageData
	(*ProcessResult)(nil),       // 7: clientToTask.ProcessResult
	(*durationpb.Duration)(nil), // 8: google.protobuf.Duration
}
var file_clientToTask_proto_depIdxs = []int32{
	8, // 0: clientToTask.PerfData.procTime:type_name -> google.protobuf.Duration
	8, // 1: clientToTask.ProbeResult.whatIfTime:type_name -> google.protobuf.Duration
	0, // 2: clientToTask.rpcClientToTask.RTT_Request:input_type -> clientToTask.TestPerf
	0, // 3: clientToTask.rpcClientToTask.Probe_Request:input_type -> clientToTask.TestPerf
	3, // 4: clientToTask.rpcClientToTask.Join_Request:input_type -> clientToTask.Decision
	5, // 5: clientToTask.rpcClientToTask.Unexpected_client_join:input_type -> clientToTask.EmptyMessage
	5, // 6: clientToTask.rpcClientToTask.End_process:input_type -> clientToTask.EmptyMessage
	0, // 7: clientToTask.rpcClientToTask.TestPerformance:input_type -> clientToTask.TestPerf
	6, // 8: clientToTask.rpcClientToTask.SendRecvImage:input_type -> clientToTask.ImageData
	1, // 9: clientToTask.rpcClientToTask.RTT_Request:output_type -> clientToTask.PerfData
	2, // 10: clientToTask.rpcClientToTask.Probe_Request:output_type -> clientToTask.ProbeResult
	4, // 11: clientToTask.rpcClientToTask.Join_Request:output_type -> clientToTask.JoinResult
	5, // 12: clientToTask.rpcClientToTask.Unexpected_client_join:output_type -> clientToTask.EmptyMessage
	5, // 13: clientToTask.rpcClientToTask.End_process:output_type -> clientToTask.EmptyMessage
	1, // 14: clientToTask.rpcClientToTask.TestPerformance:output_type -> clientToTask.PerfData
	7, // 15: clientToTask.rpcClientToTask.SendRecvImage:output_type -> clientToTask.ProcessResult
	9, // [9:16] is the sub-list for method output_type
	2, // [2:9] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_clientToTask_proto_init() }
func file_clientToTask_proto_init() {
	if File_clientToTask_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_clientToTask_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPerf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientToTask_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerfData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientToTask_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientToTask_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientToTask_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientToTask_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientToTask_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clientToTask_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_clientToTask_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_clientToTask_proto_goTypes,
		DependencyIndexes: file_clientToTask_proto_depIdxs,
		MessageInfos:      file_clientToTask_proto_msgTypes,
	}.Build()
	File_clientToTask_proto = out.File
	file_clientToTask_proto_rawDesc = nil
	file_clientToTask_proto_goTypes = nil
	file_clientToTask_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RpcClientToTaskClient is the client API for RpcClientToTask service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcClientToTaskClient interface {
	RTT_Request(ctx context.Context, in *TestPerf, opts ...grpc.CallOption) (*PerfData, error)
	Probe_Request(ctx context.Context, in *TestPerf, opts ...grpc.CallOption) (*ProbeResult, error)
	Join_Request(ctx context.Context, in *Decision, opts ...grpc.CallOption) (*JoinResult, error)
	UnexpectedClientJoin(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	EndProcess(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	TestPerformance(ctx context.Context, in *TestPerf, opts ...grpc.CallOption) (*PerfData, error)
	SendRecvImage(ctx context.Context, opts ...grpc.CallOption) (RpcClientToTask_SendRecvImageClient, error)
}

type rpcClientToTaskClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcClientToTaskClient(cc grpc.ClientConnInterface) RpcClientToTaskClient {
	return &rpcClientToTaskClient{cc}
}

func (c *rpcClientToTaskClient) RTT_Request(ctx context.Context, in *TestPerf, opts ...grpc.CallOption) (*PerfData, error) {
	out := new(PerfData)
	err := c.cc.Invoke(ctx, "/clientToTask.rpcClientToTask/RTT_Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClientToTaskClient) Probe_Request(ctx context.Context, in *TestPerf, opts ...grpc.CallOption) (*ProbeResult, error) {
	out := new(ProbeResult)
	err := c.cc.Invoke(ctx, "/clientToTask.rpcClientToTask/Probe_Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClientToTaskClient) Join_Request(ctx context.Context, in *Decision, opts ...grpc.CallOption) (*JoinResult, error) {
	out := new(JoinResult)
	err := c.cc.Invoke(ctx, "/clientToTask.rpcClientToTask/Join_Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClientToTaskClient) UnexpectedClientJoin(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/clientToTask.rpcClientToTask/Unexpected_client_join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClientToTaskClient) EndProcess(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/clientToTask.rpcClientToTask/End_process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClientToTaskClient) TestPerformance(ctx context.Context, in *TestPerf, opts ...grpc.CallOption) (*PerfData, error) {
	out := new(PerfData)
	err := c.cc.Invoke(ctx, "/clientToTask.rpcClientToTask/TestPerformance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClientToTaskClient) SendRecvImage(ctx context.Context, opts ...grpc.CallOption) (RpcClientToTask_SendRecvImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RpcClientToTask_serviceDesc.Streams[0], "/clientToTask.rpcClientToTask/SendRecvImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpcClientToTaskSendRecvImageClient{stream}
	return x, nil
}

type RpcClientToTask_SendRecvImageClient interface {
	Send(*ImageData) error
	Recv() (*ProcessResult, error)
	grpc.ClientStream
}

type rpcClientToTaskSendRecvImageClient struct {
	grpc.ClientStream
}

func (x *rpcClientToTaskSendRecvImageClient) Send(m *ImageData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rpcClientToTaskSendRecvImageClient) Recv() (*ProcessResult, error) {
	m := new(ProcessResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RpcClientToTaskServer is the server API for RpcClientToTask service.
type RpcClientToTaskServer interface {
	RTT_Request(context.Context, *TestPerf) (*PerfData, error)
	Probe_Request(context.Context, *TestPerf) (*ProbeResult, error)
	Join_Request(context.Context, *Decision) (*JoinResult, error)
	UnexpectedClientJoin(context.Context, *EmptyMessage) (*EmptyMessage, error)
	EndProcess(context.Context, *EmptyMessage) (*EmptyMessage, error)
	TestPerformance(context.Context, *TestPerf) (*PerfData, error)
	SendRecvImage(RpcClientToTask_SendRecvImageServer) error
}

// UnimplementedRpcClientToTaskServer can be embedded to have forward compatible implementations.
type UnimplementedRpcClientToTaskServer struct {
}

func (*UnimplementedRpcClientToTaskServer) RTT_Request(context.Context, *TestPerf) (*PerfData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RTT_Request not implemented")
}
func (*UnimplementedRpcClientToTaskServer) Probe_Request(context.Context, *TestPerf) (*ProbeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Probe_Request not implemented")
}
func (*UnimplementedRpcClientToTaskServer) Join_Request(context.Context, *Decision) (*JoinResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join_Request not implemented")
}
func (*UnimplementedRpcClientToTaskServer) UnexpectedClientJoin(context.Context, *EmptyMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnexpectedClientJoin not implemented")
}
func (*UnimplementedRpcClientToTaskServer) EndProcess(context.Context, *EmptyMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndProcess not implemented")
}
func (*UnimplementedRpcClientToTaskServer) TestPerformance(context.Context, *TestPerf) (*PerfData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestPerformance not implemented")
}
func (*UnimplementedRpcClientToTaskServer) SendRecvImage(RpcClientToTask_SendRecvImageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendRecvImage not implemented")
}

func RegisterRpcClientToTaskServer(s *grpc.Server, srv RpcClientToTaskServer) {
	s.RegisterService(&_RpcClientToTask_serviceDesc, srv)
}

func _RpcClientToTask_RTT_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestPerf)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcClientToTaskServer).RTT_Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientToTask.rpcClientToTask/RTT_Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcClientToTaskServer).RTT_Request(ctx, req.(*TestPerf))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcClientToTask_Probe_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestPerf)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcClientToTaskServer).Probe_Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientToTask.rpcClientToTask/Probe_Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcClientToTaskServer).Probe_Request(ctx, req.(*TestPerf))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcClientToTask_Join_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Decision)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcClientToTaskServer).Join_Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientToTask.rpcClientToTask/Join_Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcClientToTaskServer).Join_Request(ctx, req.(*Decision))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcClientToTask_UnexpectedClientJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcClientToTaskServer).UnexpectedClientJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientToTask.rpcClientToTask/UnexpectedClientJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcClientToTaskServer).UnexpectedClientJoin(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcClientToTask_EndProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcClientToTaskServer).EndProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientToTask.rpcClientToTask/EndProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcClientToTaskServer).EndProcess(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcClientToTask_TestPerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestPerf)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcClientToTaskServer).TestPerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientToTask.rpcClientToTask/TestPerformance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcClientToTaskServer).TestPerformance(ctx, req.(*TestPerf))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcClientToTask_SendRecvImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcClientToTaskServer).SendRecvImage(&rpcClientToTaskSendRecvImageServer{stream})
}

type RpcClientToTask_SendRecvImageServer interface {
	Send(*ProcessResult) error
	Recv() (*ImageData, error)
	grpc.ServerStream
}

type rpcClientToTaskSendRecvImageServer struct {
	grpc.ServerStream
}

func (x *rpcClientToTaskSendRecvImageServer) Send(m *ProcessResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rpcClientToTaskSendRecvImageServer) Recv() (*ImageData, error) {
	m := new(ImageData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RpcClientToTask_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clientToTask.rpcClientToTask",
	HandlerType: (*RpcClientToTaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RTT_Request",
			Handler:    _RpcClientToTask_RTT_Request_Handler,
		},
		{
			MethodName: "Probe_Request",
			Handler:    _RpcClientToTask_Probe_Request_Handler,
		},
		{
			MethodName: "Join_Request",
			Handler:    _RpcClientToTask_Join_Request_Handler,
		},
		{
			MethodName: "Unexpected_client_join",
			Handler:    _RpcClientToTask_UnexpectedClientJoin_Handler,
		},
		{
			MethodName: "End_process",
			Handler:    _RpcClientToTask_EndProcess_Handler,
		},
		{
			MethodName: "TestPerformance",
			Handler:    _RpcClientToTask_TestPerformance_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendRecvImage",
			Handler:       _RpcClientToTask_SendRecvImage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "clientToTask.proto",
}
