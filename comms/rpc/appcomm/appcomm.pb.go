// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: appcomm.proto

package appcomm

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Application struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId            *UUID        `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	NumOfDuplication int32        `protobuf:"varint,2,opt,name=numOfDuplication,proto3" json:"numOfDuplication,omitempty"`
	TaskRequest      *TaskRequest `protobuf:"bytes,3,opt,name=taskRequest,proto3" json:"taskRequest,omitempty"`
}

func (x *Application) Reset() {
	*x = Application{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appcomm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Application) ProtoMessage() {}

func (x *Application) ProtoReflect() protoreflect.Message {
	mi := &file_appcomm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Application.ProtoReflect.Descriptor instead.
func (*Application) Descriptor() ([]byte, []int) {
	return file_appcomm_proto_rawDescGZIP(), []int{0}
}

func (x *Application) GetAppId() *UUID {
	if x != nil {
		return x.AppId
	}
	return nil
}

func (x *Application) GetNumOfDuplication() int32 {
	if x != nil {
		return x.NumOfDuplication
	}
	return 0
}

func (x *Application) GetTaskRequest() *TaskRequest {
	if x != nil {
		return x.TaskRequest
	}
	return nil
}

type UUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UUID) Reset() {
	*x = UUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appcomm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUID) ProtoMessage() {}

func (x *UUID) ProtoReflect() protoreflect.Message {
	mi := &file_appcomm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUID.ProtoReflect.Descriptor instead.
func (*UUID) Descriptor() ([]byte, []int) {
	return file_appcomm_proto_rawDescGZIP(), []int{1}
}

func (x *UUID) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type TaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId    *UUID       `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Image    string      `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Command  []string    `protobuf:"bytes,3,rep,name=command,proto3" json:"command,omitempty"`
	Tty      bool        `protobuf:"varint,4,opt,name=tty,proto3" json:"tty,omitempty"`
	Name     string      `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Env      []string    `protobuf:"bytes,6,rep,name=env,proto3" json:"env,omitempty"`
	Port     int64       `protobuf:"varint,7,opt,name=port,proto3" json:"port,omitempty"`
	Limits   *TaskLimits `protobuf:"bytes,8,opt,name=limits,proto3" json:"limits,omitempty"`
	Taskspec *TaskSpec   `protobuf:"bytes,9,opt,name=taskspec,proto3" json:"taskspec,omitempty"`
	TaskId   *UUID       `protobuf:"bytes,10,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *TaskRequest) Reset() {
	*x = TaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appcomm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRequest) ProtoMessage() {}

func (x *TaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_appcomm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRequest.ProtoReflect.Descriptor instead.
func (*TaskRequest) Descriptor() ([]byte, []int) {
	return file_appcomm_proto_rawDescGZIP(), []int{2}
}

func (x *TaskRequest) GetAppId() *UUID {
	if x != nil {
		return x.AppId
	}
	return nil
}

func (x *TaskRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *TaskRequest) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *TaskRequest) GetTty() bool {
	if x != nil {
		return x.Tty
	}
	return false
}

func (x *TaskRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskRequest) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *TaskRequest) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TaskRequest) GetLimits() *TaskLimits {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *TaskRequest) GetTaskspec() *TaskSpec {
	if x != nil {
		return x.Taskspec
	}
	return nil
}

func (x *TaskRequest) GetTaskId() *UUID {
	if x != nil {
		return x.TaskId
	}
	return nil
}

type TaskLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuShares int64 `protobuf:"varint,1,opt,name=cpu_shares,json=cpuShares,proto3" json:"cpu_shares,omitempty"`
	Memory    int64 `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (x *TaskLimits) Reset() {
	*x = TaskLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appcomm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLimits) ProtoMessage() {}

func (x *TaskLimits) ProtoReflect() protoreflect.Message {
	mi := &file_appcomm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLimits.ProtoReflect.Descriptor instead.
func (*TaskLimits) Descriptor() ([]byte, []int) {
	return file_appcomm_proto_rawDescGZIP(), []int{3}
}

func (x *TaskLimits) GetCpuShares() int64 {
	if x != nil {
		return x.CpuShares
	}
	return 0
}

func (x *TaskLimits) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

type TaskSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters     []string                        `protobuf:"bytes,1,rep,name=Filters,proto3" json:"Filters,omitempty"`
	Sort        string                          `protobuf:"bytes,2,opt,name=Sort,proto3" json:"Sort,omitempty"`
	ResourceMap map[string]*ResourceRequirement `protobuf:"bytes,3,rep,name=ResourceMap,proto3" json:"ResourceMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Ports       map[string]string               `protobuf:"bytes,4,rep,name=Ports,proto3" json:"Ports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsPublic    bool                            `protobuf:"varint,5,opt,name=IsPublic,proto3" json:"IsPublic,omitempty"`
	NumReplicas int64                           `protobuf:"varint,6,opt,name=NumReplicas,proto3" json:"NumReplicas,omitempty"`
	CargoSpec   *CargoReq                       `protobuf:"bytes,7,opt,name=CargoSpec,proto3" json:"CargoSpec,omitempty"`
	DataSources *Location                       `protobuf:"bytes,8,opt,name=DataSources,proto3" json:"DataSources,omitempty"`
	Tags        []string                        `protobuf:"bytes,9,rep,name=Tags,proto3" json:"Tags,omitempty"`
}

func (x *TaskSpec) Reset() {
	*x = TaskSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appcomm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSpec) ProtoMessage() {}

func (x *TaskSpec) ProtoReflect() protoreflect.Message {
	mi := &file_appcomm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSpec.ProtoReflect.Descriptor instead.
func (*TaskSpec) Descriptor() ([]byte, []int) {
	return file_appcomm_proto_rawDescGZIP(), []int{4}
}

func (x *TaskSpec) GetFilters() []string {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *TaskSpec) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *TaskSpec) GetResourceMap() map[string]*ResourceRequirement {
	if x != nil {
		return x.ResourceMap
	}
	return nil
}

func (x *TaskSpec) GetPorts() map[string]string {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *TaskSpec) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *TaskSpec) GetNumReplicas() int64 {
	if x != nil {
		return x.NumReplicas
	}
	return 0
}

func (x *TaskSpec) GetCargoSpec() *CargoReq {
	if x != nil {
		return x.CargoSpec
	}
	return nil
}

func (x *TaskSpec) GetDataSources() *Location {
	if x != nil {
		return x.DataSources
	}
	return nil
}

func (x *TaskSpec) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ResourceRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requested int64   `protobuf:"varint,1,opt,name=Requested,proto3" json:"Requested,omitempty"`
	Weight    float64 `protobuf:"fixed64,2,opt,name=Weight,proto3" json:"Weight,omitempty"`
	Required  bool    `protobuf:"varint,3,opt,name=Required,proto3" json:"Required,omitempty"`
}

func (x *ResourceRequirement) Reset() {
	*x = ResourceRequirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appcomm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRequirement) ProtoMessage() {}

func (x *ResourceRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_appcomm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRequirement.ProtoReflect.Descriptor instead.
func (*ResourceRequirement) Descriptor() ([]byte, []int) {
	return file_appcomm_proto_rawDescGZIP(), []int{5}
}

func (x *ResourceRequirement) GetRequested() int64 {
	if x != nil {
		return x.Requested
	}
	return 0
}

func (x *ResourceRequirement) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ResourceRequirement) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

type CargoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size     int64    `protobuf:"varint,1,opt,name=Size,proto3" json:"Size,omitempty"`
	NReplica int64    `protobuf:"varint,2,opt,name=nReplica,proto3" json:"nReplica,omitempty"`
	IPs      []string `protobuf:"bytes,3,rep,name=IPs,proto3" json:"IPs,omitempty"`
	Ports    []string `protobuf:"bytes,4,rep,name=Ports,proto3" json:"Ports,omitempty"`
}

func (x *CargoReq) Reset() {
	*x = CargoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appcomm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CargoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CargoReq) ProtoMessage() {}

func (x *CargoReq) ProtoReflect() protoreflect.Message {
	mi := &file_appcomm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CargoReq.ProtoReflect.Descriptor instead.
func (*CargoReq) Descriptor() ([]byte, []int) {
	return file_appcomm_proto_rawDescGZIP(), []int{6}
}

func (x *CargoReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CargoReq) GetNReplica() int64 {
	if x != nil {
		return x.NReplica
	}
	return 0
}

func (x *CargoReq) GetIPs() []string {
	if x != nil {
		return x.IPs
	}
	return nil
}

func (x *CargoReq) GetPorts() []string {
	if x != nil {
		return x.Ports
	}
	return nil
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon float64 `protobuf:"fixed64,2,opt,name=lon,proto3" json:"lon,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appcomm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_appcomm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_appcomm_proto_rawDescGZIP(), []int{7}
}

func (x *Location) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Location) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

type AppStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *AppStatus) Reset() {
	*x = AppStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appcomm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppStatus) ProtoMessage() {}

func (x *AppStatus) ProtoReflect() protoreflect.Message {
	mi := &file_appcomm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppStatus.ProtoReflect.Descriptor instead.
func (*AppStatus) Descriptor() ([]byte, []int) {
	return file_appcomm_proto_rawDescGZIP(), []int{8}
}

func (x *AppStatus) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId    *UUID     `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	GeoLocation *Location `protobuf:"bytes,2,opt,name=geoLocation,proto3" json:"geoLocation,omitempty"`
	Tag         []string  `protobuf:"bytes,3,rep,name=tag,proto3" json:"tag,omitempty"`
	AppId       *UUID     `protobuf:"bytes,4,opt,name=appId,proto3" json:"appId,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appcomm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_appcomm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_appcomm_proto_rawDescGZIP(), []int{9}
}

func (x *Query) GetClientId() *UUID {
	if x != nil {
		return x.ClientId
	}
	return nil
}

func (x *Query) GetGeoLocation() *Location {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *Query) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *Query) GetAppId() *UUID {
	if x != nil {
		return x.AppId
	}
	return nil
}

type TaskList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskList []*Task `protobuf:"bytes,1,rep,name=taskList,proto3" json:"taskList,omitempty"`
}

func (x *TaskList) Reset() {
	*x = TaskList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appcomm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskList) ProtoMessage() {}

func (x *TaskList) ProtoReflect() protoreflect.Message {
	mi := &file_appcomm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskList.ProtoReflect.Descriptor instead.
func (*TaskList) Descriptor() ([]byte, []int) {
	return file_appcomm_proto_rawDescGZIP(), []int{10}
}

func (x *TaskList) GetTaskList() []*Task {
	if x != nil {
		return x.TaskList
	}
	return nil
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port string `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appcomm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_appcomm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_appcomm_proto_rawDescGZIP(), []int{11}
}

func (x *Task) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Task) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

var File_appcomm_proto protoreflect.FileDescriptor

var file_appcomm_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x61, 0x70, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x61, 0x70, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x22, 0x96, 0x01, 0x0a, 0x0b, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x70, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x44, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0b, 0x74, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x61, 0x70, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x1c, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xb3, 0x02, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x61, 0x70, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x74, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x6e, 0x76, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x2b, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x2d,
	0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x70, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x61, 0x70, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x70, 0x65, 0x63, 0x12, 0x26, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x61, 0x70, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x70, 0x75, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x70, 0x75, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0x82, 0x04, 0x0a, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x70,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x32, 0x0a, 0x05, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x70,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x49, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x49, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x4e,
	0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x2f, 0x0a,
	0x09, 0x43, 0x61, 0x72, 0x67, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x61, 0x70, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x43, 0x61, 0x72, 0x67, 0x6f,
	0x52, 0x65, 0x71, 0x52, 0x09, 0x43, 0x61, 0x72, 0x67, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x12, 0x33,
	0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x1a, 0x5c, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61,
	0x70, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x67, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x62, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x67,
	0x6f, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x50, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x49, 0x50, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x2e, 0x0a, 0x08,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x22, 0x23, 0x0a, 0x09,
	0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x9e, 0x01, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x61, 0x70, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70,
	0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x23, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61,
	0x70, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x22, 0x35, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x61, 0x70, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2a, 0x0a, 0x04, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x32, 0x89, 0x01, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x11,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x2e, 0x61, 0x70, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x70, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x30, 0x01, 0x12, 0x32, 0x0a,
	0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e,
	0x2e, 0x61, 0x70, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x11,
	0x2e, 0x61, 0x70, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x6e, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x70, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_appcomm_proto_rawDescOnce sync.Once
	file_appcomm_proto_rawDescData = file_appcomm_proto_rawDesc
)

func file_appcomm_proto_rawDescGZIP() []byte {
	file_appcomm_proto_rawDescOnce.Do(func() {
		file_appcomm_proto_rawDescData = protoimpl.X.CompressGZIP(file_appcomm_proto_rawDescData)
	})
	return file_appcomm_proto_rawDescData
}

var file_appcomm_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_appcomm_proto_goTypes = []interface{}{
	(*Application)(nil),         // 0: appcomm.Application
	(*UUID)(nil),                // 1: appcomm.UUID
	(*TaskRequest)(nil),         // 2: appcomm.TaskRequest
	(*TaskLimits)(nil),          // 3: appcomm.TaskLimits
	(*TaskSpec)(nil),            // 4: appcomm.TaskSpec
	(*ResourceRequirement)(nil), // 5: appcomm.ResourceRequirement
	(*CargoReq)(nil),            // 6: appcomm.CargoReq
	(*Location)(nil),            // 7: appcomm.Location
	(*AppStatus)(nil),           // 8: appcomm.AppStatus
	(*Query)(nil),               // 9: appcomm.Query
	(*TaskList)(nil),            // 10: appcomm.TaskList
	(*Task)(nil),                // 11: appcomm.Task
	nil,                         // 12: appcomm.TaskSpec.ResourceMapEntry
	nil,                         // 13: appcomm.TaskSpec.PortsEntry
}
var file_appcomm_proto_depIdxs = []int32{
	1,  // 0: appcomm.Application.appId:type_name -> appcomm.UUID
	2,  // 1: appcomm.Application.taskRequest:type_name -> appcomm.TaskRequest
	1,  // 2: appcomm.TaskRequest.app_id:type_name -> appcomm.UUID
	3,  // 3: appcomm.TaskRequest.limits:type_name -> appcomm.TaskLimits
	4,  // 4: appcomm.TaskRequest.taskspec:type_name -> appcomm.TaskSpec
	1,  // 5: appcomm.TaskRequest.task_id:type_name -> appcomm.UUID
	12, // 6: appcomm.TaskSpec.ResourceMap:type_name -> appcomm.TaskSpec.ResourceMapEntry
	13, // 7: appcomm.TaskSpec.Ports:type_name -> appcomm.TaskSpec.PortsEntry
	6,  // 8: appcomm.TaskSpec.CargoSpec:type_name -> appcomm.CargoReq
	7,  // 9: appcomm.TaskSpec.DataSources:type_name -> appcomm.Location
	1,  // 10: appcomm.Query.clientId:type_name -> appcomm.UUID
	7,  // 11: appcomm.Query.geoLocation:type_name -> appcomm.Location
	1,  // 12: appcomm.Query.appId:type_name -> appcomm.UUID
	11, // 13: appcomm.TaskList.taskList:type_name -> appcomm.Task
	5,  // 14: appcomm.TaskSpec.ResourceMapEntry.value:type_name -> appcomm.ResourceRequirement
	0,  // 15: appcomm.ApplicationManager.SubmitApplication:input_type -> appcomm.Application
	9,  // 16: appcomm.ApplicationManager.QueryTaskList:input_type -> appcomm.Query
	8,  // 17: appcomm.ApplicationManager.SubmitApplication:output_type -> appcomm.AppStatus
	10, // 18: appcomm.ApplicationManager.QueryTaskList:output_type -> appcomm.TaskList
	17, // [17:19] is the sub-list for method output_type
	15, // [15:17] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_appcomm_proto_init() }
func file_appcomm_proto_init() {
	if File_appcomm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_appcomm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Application); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appcomm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appcomm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appcomm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appcomm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appcomm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRequirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appcomm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CargoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appcomm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appcomm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appcomm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appcomm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appcomm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_appcomm_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_appcomm_proto_goTypes,
		DependencyIndexes: file_appcomm_proto_depIdxs,
		MessageInfos:      file_appcomm_proto_msgTypes,
	}.Build()
	File_appcomm_proto = out.File
	file_appcomm_proto_rawDesc = nil
	file_appcomm_proto_goTypes = nil
	file_appcomm_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ApplicationManagerClient is the client API for ApplicationManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApplicationManagerClient interface {
	SubmitApplication(ctx context.Context, in *Application, opts ...grpc.CallOption) (ApplicationManager_SubmitApplicationClient, error)
	QueryTaskList(ctx context.Context, in *Query, opts ...grpc.CallOption) (*TaskList, error)
}

type applicationManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationManagerClient(cc grpc.ClientConnInterface) ApplicationManagerClient {
	return &applicationManagerClient{cc}
}

func (c *applicationManagerClient) SubmitApplication(ctx context.Context, in *Application, opts ...grpc.CallOption) (ApplicationManager_SubmitApplicationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ApplicationManager_serviceDesc.Streams[0], "/appcomm.ApplicationManager/SubmitApplication", opts...)
	if err != nil {
		return nil, err
	}
	x := &applicationManagerSubmitApplicationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApplicationManager_SubmitApplicationClient interface {
	Recv() (*AppStatus, error)
	grpc.ClientStream
}

type applicationManagerSubmitApplicationClient struct {
	grpc.ClientStream
}

func (x *applicationManagerSubmitApplicationClient) Recv() (*AppStatus, error) {
	m := new(AppStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *applicationManagerClient) QueryTaskList(ctx context.Context, in *Query, opts ...grpc.CallOption) (*TaskList, error) {
	out := new(TaskList)
	err := c.cc.Invoke(ctx, "/appcomm.ApplicationManager/QueryTaskList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationManagerServer is the server API for ApplicationManager service.
type ApplicationManagerServer interface {
	SubmitApplication(*Application, ApplicationManager_SubmitApplicationServer) error
	QueryTaskList(context.Context, *Query) (*TaskList, error)
}

// UnimplementedApplicationManagerServer can be embedded to have forward compatible implementations.
type UnimplementedApplicationManagerServer struct {
}

func (*UnimplementedApplicationManagerServer) SubmitApplication(*Application, ApplicationManager_SubmitApplicationServer) error {
	return status.Errorf(codes.Unimplemented, "method SubmitApplication not implemented")
}
func (*UnimplementedApplicationManagerServer) QueryTaskList(context.Context, *Query) (*TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTaskList not implemented")
}

func RegisterApplicationManagerServer(s *grpc.Server, srv ApplicationManagerServer) {
	s.RegisterService(&_ApplicationManager_serviceDesc, srv)
}

func _ApplicationManager_SubmitApplication_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Application)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApplicationManagerServer).SubmitApplication(m, &applicationManagerSubmitApplicationServer{stream})
}

type ApplicationManager_SubmitApplicationServer interface {
	Send(*AppStatus) error
	grpc.ServerStream
}

type applicationManagerSubmitApplicationServer struct {
	grpc.ServerStream
}

func (x *applicationManagerSubmitApplicationServer) Send(m *AppStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _ApplicationManager_QueryTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagerServer).QueryTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appcomm.ApplicationManager/QueryTaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagerServer).QueryTaskList(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApplicationManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appcomm.ApplicationManager",
	HandlerType: (*ApplicationManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryTaskList",
			Handler:    _ApplicationManager_QueryTaskList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubmitApplication",
			Handler:       _ApplicationManager_SubmitApplication_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "appcomm.proto",
}
